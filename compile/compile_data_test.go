// Test data generated by make_compile_test.py - do not edit

package compile

import (
	"github.com/ncw/gpython/py"
)

var compileTestData = []struct {
	in   string
	mode string // exec, eval or single
	out  py.Code
	dis  string
}{
	{"1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x53",
		Consts:         []py.Object{py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 RETURN_VALUE\n"},
	{"\"hello\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x53",
		Consts:         []py.Object{py.String("hello")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('hello')\n              3 RETURN_VALUE\n"},
	{"a", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x65\x00\x00\x53",
		Consts:         []py.Object{},
		Names:          []string{"a"},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_NAME                0 (a)\n              3 RETURN_VALUE\n"},
	{"\"a\"+1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x17\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_ADD\n              7 RETURN_VALUE\n"},
	{"\"a\"-1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x18\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_SUBTRACT\n              7 RETURN_VALUE\n"},
	{"\"a\"*\"b\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x14\x53",
		Consts:         []py.Object{py.String("a"), py.String("b")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 ('b')\n              6 BINARY_MULTIPLY\n              7 RETURN_VALUE\n"},
	{"\"a\"/1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x1b\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_TRUE_DIVIDE\n              7 RETURN_VALUE\n"},
	{"\"a\"%1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x16\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_MODULO\n              7 RETURN_VALUE\n"},
	{"\"a\"**1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x13\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_POWER\n              7 RETURN_VALUE\n"},
	{"\"a\"<<1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x3e\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_LSHIFT\n              7 RETURN_VALUE\n"},
	{"\"a\">>1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x3f\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_RSHIFT\n              7 RETURN_VALUE\n"},
	{"\"a\"|1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x42\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_OR\n              7 RETURN_VALUE\n"},
	{"\"a\"^1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x41\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_XOR\n              7 RETURN_VALUE\n"},
	{"\"a\"&1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x40\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_AND\n              7 RETURN_VALUE\n"},
	{"\"a\"//1", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x1a\x53",
		Consts:         []py.Object{py.String("a"), py.Int(1)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               1 (1)\n              6 BINARY_FLOOR_DIVIDE\n              7 RETURN_VALUE\n"},
	{"a+a", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x65\x00\x00\x65\x00\x00\x17\x53",
		Consts:         []py.Object{},
		Names:          []string{"a"},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_NAME                0 (a)\n              3 LOAD_NAME                0 (a)\n              6 BINARY_ADD\n              7 RETURN_VALUE\n"},
	{"\"a\"*\"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x00\x00\x14\x53",
		Consts:         []py.Object{py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 LOAD_CONST               0 ('a')\n              6 BINARY_MULTIPLY\n              7 RETURN_VALUE\n"},
	{"~ \"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x0f\x53",
		Consts:         []py.Object{py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 UNARY_INVERT\n              4 RETURN_VALUE\n"},
	{"not \"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x0c\x53",
		Consts:         []py.Object{py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 UNARY_NOT\n              4 RETURN_VALUE\n"},
	{"+\"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x0a\x53",
		Consts:         []py.Object{py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 UNARY_POSITIVE\n              4 RETURN_VALUE\n"},
	{"-\"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      1,
		Flags:          64,
		Code:           "\x64\x00\x00\x0b\x53",
		Consts:         []py.Object{py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('a')\n              3 UNARY_NEGATIVE\n              4 RETURN_VALUE\n"},
	{"1 and 2", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x6f\x09\x00\x64\x01\x00\x53",
		Consts:         []py.Object{py.Int(1), py.Int(2)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 JUMP_IF_FALSE_OR_POP     9\n              6 LOAD_CONST               1 (2)\n        >>    9 RETURN_VALUE\n"},
	{"1 and 2 and 3 and 4", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      4,
		Flags:          64,
		Code:           "\x64\x00\x00\x6f\x15\x00\x64\x01\x00\x6f\x15\x00\x64\x02\x00\x6f\x15\x00\x64\x03\x00\x53",
		Consts:         []py.Object{py.Int(1), py.Int(2), py.Int(3), py.Int(4)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 JUMP_IF_FALSE_OR_POP    21\n              6 LOAD_CONST               1 (2)\n              9 JUMP_IF_FALSE_OR_POP    21\n             12 LOAD_CONST               2 (3)\n             15 JUMP_IF_FALSE_OR_POP    21\n             18 LOAD_CONST               3 (4)\n        >>   21 RETURN_VALUE\n"},
	{"1 and 2", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x6f\x09\x00\x64\x01\x00\x53",
		Consts:         []py.Object{py.Int(1), py.Int(2)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 JUMP_IF_FALSE_OR_POP     9\n              6 LOAD_CONST               1 (2)\n        >>    9 RETURN_VALUE\n"},
	{"1 or 2", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x70\x09\x00\x64\x01\x00\x53",
		Consts:         []py.Object{py.Int(1), py.Int(2)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 JUMP_IF_TRUE_OR_POP      9\n              6 LOAD_CONST               1 (2)\n        >>    9 RETURN_VALUE\n"},
	{"1 or 2 or 3 or 4", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      4,
		Flags:          64,
		Code:           "\x64\x00\x00\x70\x15\x00\x64\x01\x00\x70\x15\x00\x64\x02\x00\x70\x15\x00\x64\x03\x00\x53",
		Consts:         []py.Object{py.Int(1), py.Int(2), py.Int(3), py.Int(4)},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 JUMP_IF_TRUE_OR_POP     21\n              6 LOAD_CONST               1 (2)\n              9 JUMP_IF_TRUE_OR_POP     21\n             12 LOAD_CONST               2 (3)\n             15 JUMP_IF_TRUE_OR_POP     21\n             18 LOAD_CONST               3 (4)\n        >>   21 RETURN_VALUE\n"},
	{"\"1\"+\"2\"*\"3\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      3,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x64\x02\x00\x14\x17\x53",
		Consts:         []py.Object{py.String("1"), py.String("2"), py.String("3")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('1')\n              3 LOAD_CONST               1 ('2')\n              6 LOAD_CONST               2 ('3')\n              9 BINARY_MULTIPLY\n             10 BINARY_ADD\n             11 RETURN_VALUE\n"},
	{"\"1\"+(\"2\"*\"3\")", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      3,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x64\x02\x00\x14\x17\x53",
		Consts:         []py.Object{py.String("1"), py.String("2"), py.String("3")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 ('1')\n              3 LOAD_CONST               1 ('2')\n              6 LOAD_CONST               2 ('3')\n              9 BINARY_MULTIPLY\n             10 BINARY_ADD\n             11 RETURN_VALUE\n"},
	{"(1+\"2\")*\"3\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x17\x64\x02\x00\x14\x53",
		Consts:         []py.Object{py.Int(1), py.String("2"), py.String("3")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 LOAD_CONST               1 ('2')\n              6 BINARY_ADD\n              7 LOAD_CONST               2 ('3')\n             10 BINARY_MULTIPLY\n             11 RETURN_VALUE\n"},
	{"(\"true\" if 1+\"2\" else \"false\")+\"a\"", "eval", py.Code{
		Argcount:       0,
		Kwonlyargcount: 0,
		Nlocals:        0,
		Stacksize:      2,
		Flags:          64,
		Code:           "\x64\x00\x00\x64\x01\x00\x17\x72\x10\x00\x64\x02\x00\x6e\x03\x00\x64\x03\x00\x64\x04\x00\x17\x53",
		Consts:         []py.Object{py.Int(1), py.String("2"), py.String("true"), py.String("false"), py.String("a")},
		Names:          []string{},
		Varnames:       []string{},
		Freevars:       []string{},
		Cellvars:       []string{},
		Filename:       "<string>",
		Name:           "<module>",
		Firstlineno:    1,
		Lnotab:         "",
	}, "  1           0 LOAD_CONST               0 (1)\n              3 LOAD_CONST               1 ('2')\n              6 BINARY_ADD\n              7 POP_JUMP_IF_FALSE       16\n             10 LOAD_CONST               2 ('true')\n             13 JUMP_FORWARD             3 (to 19)\n        >>   16 LOAD_CONST               3 ('false')\n        >>   19 LOAD_CONST               4 ('a')\n             22 BINARY_ADD\n             23 RETURN_VALUE\n"},
}
