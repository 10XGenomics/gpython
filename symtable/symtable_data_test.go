// Test data generated by make_symtable_test.py - do not edit

package compile

import (
	"github.com/ncw/gpython/py"
)

var symtableTestData = []struct {
	in            string
	mode          string // exec, eval or single
	out           *SymTable
	exceptionType *py.Type
	errString     string
}{
	{"1", "eval", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols:           Symbols{},
		Children:          Children{},
	}, nil, ""},
	{"a*b*c", "eval", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"a": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"b": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"c": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"def fn(): pass", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols:           Symbols{},
				Children:          Children{},
			},
		},
	}, nil, ""},
	{"def fn(a,b):\n e=1\n return a*b*c*d*e", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      true,
				NeedsClassClosure: false,
				Varnames:          []string{"a", "b"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"c": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"d": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"e": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"def fn(a,b):\n def nested(c,d):\n  return a*b*c*d*e", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"a", "b"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
					"b": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
					"nested": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "nested",
						Lineno:            2,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      true,
						NeedsClassClosure: false,
						Varnames:          []string{"c", "d"},
						Symbols: Symbols{
							"a": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"b": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"c": Symbol{
								Flags: defParam | defUse,
								Scope: scopeLocal,
							},
							"d": Symbol{
								Flags: defParam | defUse,
								Scope: scopeLocal,
							},
							"e": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def fn(a:A,*arg:ARG,b:B=BB,c:C=CC,**kwargs:KW) -> RET:\n    def fn(A,b):\n        e=1\n        return a*arg*b*c*kwargs*A*e*glob", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"A": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"ARG": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"B": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"BB": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"C": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"CC": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"KW": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"RET": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           true,
				Varkeywords:       true,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"a", "b", "c", "arg", "kwargs"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
					"arg": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
					"b": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"c": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
					"fn": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"kwargs": Symbol{
						Flags: defParam,
						Scope: scopeCell,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "fn",
						Lineno:            2,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      true,
						NeedsClassClosure: false,
						Varnames:          []string{"A", "b"},
						Symbols: Symbols{
							"A": Symbol{
								Flags: defParam | defUse,
								Scope: scopeLocal,
							},
							"a": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"arg": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"b": Symbol{
								Flags: defParam | defUse,
								Scope: scopeLocal,
							},
							"c": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"e": Symbol{
								Flags: defLocal | defUse,
								Scope: scopeLocal,
							},
							"glob": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
							"kwargs": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def fn(a):\n    global b\n    b = a", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"b": Symbol{
				Flags: defGlobal,
				Scope: scopeGlobalExplicit,
			},
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"a"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defGlobal | defLocal,
						Scope: scopeGlobalExplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"def fn(a):\n    global b\n    global b\n    return b", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"b": Symbol{
				Flags: defGlobal,
				Scope: scopeGlobalExplicit,
			},
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      true,
				NeedsClassClosure: false,
				Varnames:          []string{"a"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defGlobal | defUse,
						Scope: scopeGlobalExplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"def inner():\n  print(x)\n  global x\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"inner": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
			"x": Symbol{
				Flags: defGlobal,
				Scope: scopeGlobalExplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "inner",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"print": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"x": Symbol{
						Flags: defGlobal | defUse,
						Scope: scopeGlobalExplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"def fn(a):\n    b = 6\n    global b\n    b = a", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"b": Symbol{
				Flags: defGlobal,
				Scope: scopeGlobalExplicit,
			},
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"a"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defGlobal | defLocal,
						Scope: scopeGlobalExplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"def fn(a=b,c=1):\n    return a+b", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"b": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"fn": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "fn",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      true,
				NeedsClassClosure: false,
				Varnames:          []string{"a", "c"},
				Symbols: Symbols{
					"a": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"c": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"@sausage\n@potato(beans)\ndef outer():\n   x = 1\n   def inner():\n       nonlocal x\n       x = 2", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"beans": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"outer": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
			"potato": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"sausage": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "outer",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"inner": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal,
						Scope: scopeCell,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "inner",
						Lineno:            5,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      false,
						NeedsClassClosure: false,
						Varnames:          []string{},
						Symbols: Symbols{
							"x": Symbol{
								Flags: defLocal | defNonlocal,
								Scope: scopeFree,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def fn(a):\n    nonlocal b\n    ", "exec", nil, py.SyntaxError, "no binding for nonlocal 'b' found"},
	{"def outer():\n   def inner():\n       nonlocal x\n       x = 2", "exec", nil, py.SyntaxError, "no binding for nonlocal 'x' found"},
	{"def outer():\n   x = 1\n   def inner():\n       print(x)\n       nonlocal x\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"outer": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "outer",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"inner": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal,
						Scope: scopeCell,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "inner",
						Lineno:            3,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      false,
						NeedsClassClosure: false,
						Varnames:          []string{},
						Symbols: Symbols{
							"print": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
							"x": Symbol{
								Flags: defNonlocal | defUse,
								Scope: scopeFree,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def outer():\n   x = 1\n   def inner():\n       x = 2\n       nonlocal x", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"outer": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "outer",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"inner": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal,
						Scope: scopeCell,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "inner",
						Lineno:            3,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      false,
						NeedsClassClosure: false,
						Varnames:          []string{},
						Symbols: Symbols{
							"x": Symbol{
								Flags: defLocal | defNonlocal,
								Scope: scopeFree,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def outer():\n   x = 1\n   def inner(x):\n       nonlocal x", "exec", nil, py.SyntaxError, "name 'x' is parameter and nonlocal"},
	{"def outer():\n   x = 1\n   def inner(x):\n       global x", "exec", nil, py.SyntaxError, "name 'x' is parameter and global"},
	{"def outer():\n   def inner():\n       global x\n       nonlocal x\n       ", "exec", nil, py.SyntaxError, "name 'x' is nonlocal and global"},
	{"def outer():\n   x = 1\n   def inner():\n       y = 2\n       return x + y + z\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"outer": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "outer",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"inner": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal,
						Scope: scopeCell,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "inner",
						Lineno:            3,
						Unoptimized:       0,
						Nested:            true,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      true,
						NeedsClassClosure: false,
						Varnames:          []string{},
						Symbols: Symbols{
							"x": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"y": Symbol{
								Flags: defLocal | defUse,
								Scope: scopeLocal,
							},
							"z": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"def outer():\n   global x\n   def inner():\n       return x\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"outer": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
			"x": Symbol{
				Flags: defGlobal,
				Scope: scopeGlobalExplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "outer",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"inner": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defGlobal,
						Scope: scopeGlobalExplicit,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "inner",
						Lineno:            3,
						Unoptimized:       0,
						Nested:            true,
						Free:              false,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      true,
						NeedsClassClosure: false,
						Varnames:          []string{},
						Symbols: Symbols{
							"x": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"nonlocal x\n", "exec", nil, py.SyntaxError, "nonlocal declaration not allowed at module level"},
	{"def fn(a,a): pass", "exec", nil, py.SyntaxError, "duplicate argument 'a' in function definition"},
	{"[ x for x in xs ]", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"[ x+y for x in xs for y in ys ]", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"[ x+y+z for x in xs if x if y if z if r for y in ys if x if y if z if p for z in zs if x if y if z if q]", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"p": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"q": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"r": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"z": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"zs": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"[ x+y for x in [ x for x in xs ] ]", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"[ x for x in xs ]\n[ y for y in ys ]", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"ys": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
			&SymTable{
				Type:              FunctionBlock,
				Name:              "listcomp",
				Lineno:            2,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"( x for x in xs )", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "genexpr",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         true,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"( x+y for x in xs for y in ys )", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "genexpr",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         true,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"( x+y+z for x in xs if x if y if z if r for y in ys if x if y if z if p for z in zs if x if y if z if q)", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "genexpr",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         true,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"p": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"q": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"r": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"z": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"zs": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"( x+y for x in ( x for x in xs ) )", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "genexpr",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         true,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
			&SymTable{
				Type:              FunctionBlock,
				Name:              "genexpr",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         true,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x for x in xs }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "setcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y for x in xs for y in ys }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "setcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y+z for x in xs if x if y if z if r for y in ys if x if y if z if p for z in zs if x if y if z if q}", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "setcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"p": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"q": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"r": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"z": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"zs": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y for x in { x for x in xs } }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "setcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
			&SymTable{
				Type:              FunctionBlock,
				Name:              "setcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x:1 for x in xs }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "dictcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y:1 for x in xs for y in ys }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "dictcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y+z:1 for x in xs if x if y if z if r for y in ys if x if y if z if p for z in zs if x if y if z if q}", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "dictcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"p": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"q": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"r": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"ys": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"z": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"zs": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"{ x+y:k for k, x in { x:1 for x in xs } }", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"xs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "dictcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
			&SymTable{
				Type:              FunctionBlock,
				Name:              "dictcomp",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{".0"},
				Symbols: Symbols{
					".0": Symbol{
						Flags: defParam,
						Scope: scopeLocal,
					},
					"_[1]": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"k": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defLocal | defUse,
						Scope: scopeLocal,
					},
					"y": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"@potato\n@sausage()\nclass A(a,b,c=\"1\",d=\"2\",*args,**kwargs):\n    VAR = x\n    def method(self):\n        super().method()\n        return VAR\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         true,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"A": Symbol{
				Flags: defLocal,
				Scope: scopeLocal,
			},
			"a": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"args": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"b": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"kwargs": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"potato": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"sausage": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              ClassBlock,
				Name:              "A",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         true,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: true,
				Varnames:          []string{},
				Symbols: Symbols{
					"VAR": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"method": Symbol{
						Flags: defLocal,
						Scope: scopeLocal,
					},
					"x": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{
					&SymTable{
						Type:              FunctionBlock,
						Name:              "method",
						Lineno:            5,
						Unoptimized:       0,
						Nested:            false,
						Free:              true,
						ChildFree:         false,
						Generator:         false,
						Varargs:           false,
						Varkeywords:       false,
						ReturnsValue:      true,
						NeedsClassClosure: false,
						Varnames:          []string{"self"},
						Symbols: Symbols{
							"VAR": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
							"__class__": Symbol{
								Flags: defUse,
								Scope: scopeFree,
							},
							"self": Symbol{
								Flags: defParam,
								Scope: scopeLocal,
							},
							"super": Symbol{
								Flags: defUse,
								Scope: scopeGlobalImplicit,
							},
						},
						Children: Children{},
					},
				},
			},
		},
	}, nil, ""},
	{"lambda: x", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols:           Symbols{},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "lambda",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{},
				Symbols: Symbols{
					"x": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"lambda y: x+y", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols:           Symbols{},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "lambda",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           false,
				Varkeywords:       false,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"y"},
				Symbols: Symbols{
					"x": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"y": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"lambda a,*arg,b=BB,c=CC,**kwargs: POTATO+a+arg+b+c+kwargs", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"BB": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"CC": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{
			&SymTable{
				Type:              FunctionBlock,
				Name:              "lambda",
				Lineno:            1,
				Unoptimized:       0,
				Nested:            false,
				Free:              false,
				ChildFree:         false,
				Generator:         false,
				Varargs:           true,
				Varkeywords:       true,
				ReturnsValue:      false,
				NeedsClassClosure: false,
				Varnames:          []string{"a", "b", "c", "arg", "kwargs"},
				Symbols: Symbols{
					"POTATO": Symbol{
						Flags: defUse,
						Scope: scopeGlobalImplicit,
					},
					"a": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"arg": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"b": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"c": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
					"kwargs": Symbol{
						Flags: defParam | defUse,
						Scope: scopeLocal,
					},
				},
				Children: Children{},
			},
		},
	}, nil, ""},
	{"with x() as y:\n  y.floop()\nprint(y)\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"print": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"x": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"y": Symbol{
				Flags: defLocal | defUse,
				Scope: scopeLocal,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"try:\n  something()\nexcept RandomError as e:\n  print(e)\nprint(e)\n", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"RandomError": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"e": Symbol{
				Flags: defLocal | defUse,
				Scope: scopeLocal,
			},
			"print": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
			"something": Symbol{
				Flags: defUse,
				Scope: scopeGlobalImplicit,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"import potato", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"potato": Symbol{
				Flags: defImport,
				Scope: scopeLocal,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"import potato.sausage", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"potato": Symbol{
				Flags: defImport,
				Scope: scopeLocal,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"from potato import sausage", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"sausage": Symbol{
				Flags: defImport,
				Scope: scopeLocal,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"from potato import sausage as salami", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols: Symbols{
			"salami": Symbol{
				Flags: defImport,
				Scope: scopeLocal,
			},
		},
		Children: Children{},
	}, nil, ""},
	{"from potato import *", "exec", &SymTable{
		Type:              ModuleBlock,
		Name:              "top",
		Lineno:            0,
		Unoptimized:       optImportStar | optTopLevel,
		Nested:            false,
		Free:              false,
		ChildFree:         false,
		Generator:         false,
		Varargs:           false,
		Varkeywords:       false,
		ReturnsValue:      false,
		NeedsClassClosure: false,
		Varnames:          []string{},
		Symbols:           Symbols{},
		Children:          Children{},
	}, nil, ""},
	{"def fn():\n  from potato import *\n", "exec", nil, py.SyntaxError, "import * only allowed at module level"},
}
